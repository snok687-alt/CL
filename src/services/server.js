// server.js
const express = require('express');
const mysql = require('mysql2/promise');
const cors = require('cors');

const app = express();
const PORT = 5000;

// Middleware
app.use(cors());
app.use(express.json());

// ‡∏™‡∏£‡πâ‡∏≤‡∏á MySQL connection pool
const pool = mysql.createPool({
  host: 'localhost',
  user: 'root', // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ï‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
  password: '', // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ï‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
  database: 'video_db',
  waitForConnections: true,
  connectionLimit: 10,
  queueLimit: 0
});

// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
const initDatabase = async () => {
  try {
    const connection = await pool.getConnection();
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á video_views
    await connection.query(`
      CREATE TABLE IF NOT EXISTS video_views (
        id INT AUTO_INCREMENT PRIMARY KEY,
        video_id VARCHAR(50) NOT NULL UNIQUE,
        views INT DEFAULT 0,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
        INDEX idx_video_id (video_id),
        INDEX idx_views (views)
      ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci
    `);

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á view_logs ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏î‡∏π
    await connection.query(`
      CREATE TABLE IF NOT EXISTS view_logs (
        id INT AUTO_INCREMENT PRIMARY KEY,
        video_id VARCHAR(50) NOT NULL,
        ip_address VARCHAR(45),
        user_agent TEXT,
        viewed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        INDEX idx_video_id (video_id),
        INDEX idx_viewed_at (viewed_at)
      ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci
    `);

    console.log('‚úÖ ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô');
    connection.release();
  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á:', error);
  }
};

// ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô server
initDatabase();

// ==================== API ENDPOINTS ====================

// 1. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏î‡∏π‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠ (‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏¢‡∏≠‡∏î‡∏ß‡∏¥‡∏ß)
app.post('/api/views/record', async (req, res) => {
  try {
    const { video_id } = req.body;
    
    if (!video_id) {
      return res.status(400).json({ error: '‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏ video_id' });
    }

    const connection = await pool.getConnection();
    
    try {
      // ‡πÄ‡∏£‡∏¥‡πà‡∏° transaction
      await connection.beginTransaction();

      // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏¢‡∏≠‡∏î‡∏ß‡∏¥‡∏ß
      await connection.query(`
        INSERT INTO video_views (video_id, views) 
        VALUES (?, 1) 
        ON DUPLICATE KEY UPDATE views = views + 1
      `, [video_id]);

      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å log
      const ipAddress = req.ip || req.connection.remoteAddress;
      const userAgent = req.headers['user-agent'];
      
      await connection.query(`
        INSERT INTO view_logs (video_id, ip_address, user_agent) 
        VALUES (?, ?, ?)
      `, [video_id, ipAddress, userAgent]);

      // ‡∏î‡∏∂‡∏á‡∏¢‡∏≠‡∏î‡∏ß‡∏¥‡∏ß‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
      const [rows] = await connection.query(
        'SELECT views FROM video_views WHERE video_id = ?',
        [video_id]
      );

      await connection.commit();
      
      res.json({ 
        success: true, 
        video_id,
        views: rows[0]?.views || 1 
      });
    } catch (error) {
      await connection.rollback();
      throw error;
    } finally {
      connection.release();
    }
  } catch (error) {
    console.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏î‡∏π:', error);
    res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏î‡∏π' });
  }
});

// 2. ‡∏î‡∏∂‡∏á‡∏¢‡∏≠‡∏î‡∏ß‡∏¥‡∏ß‡∏Ç‡∏≠‡∏á‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ (Batch)
app.post('/api/views/get', async (req, res) => {
  try {
    const { video_ids } = req.body;
    
    if (!video_ids || !Array.isArray(video_ids) || video_ids.length === 0) {
      return res.json({});
    }

    const connection = await pool.getConnection();
    
    try {
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á placeholders ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö IN clause
      const placeholders = video_ids.map(() => '?').join(',');
      
      const [rows] = await connection.query(
        `SELECT video_id, views FROM video_views WHERE video_id IN (${placeholders})`,
        video_ids
      );

      // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô object { video_id: views }
      const viewsMap = {};
      rows.forEach(row => {
        viewsMap[row.video_id] = row.views;
      });

      res.json(viewsMap);
    } finally {
      connection.release();
    }
  } catch (error) {
    console.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏¢‡∏≠‡∏î‡∏ß‡∏¥‡∏ß:', error);
    res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏¢‡∏≠‡∏î‡∏ß‡∏¥‡∏ß' });
  }
});

// 3. ‡∏î‡∏∂‡∏á‡∏¢‡∏≠‡∏î‡∏ß‡∏¥‡∏ß‡∏Ç‡∏≠‡∏á‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
app.get('/api/views/get/:video_id', async (req, res) => {
  try {
    const { video_id } = req.params;
    
    const connection = await pool.getConnection();
    
    try {
      const [rows] = await connection.query(
        'SELECT views FROM video_views WHERE video_id = ?',
        [video_id]
      );

      res.json({ 
        video_id,
        views: rows[0]?.views || 0 
      });
    } finally {
      connection.release();
    }
  } catch (error) {
    console.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏¢‡∏≠‡∏î‡∏ß‡∏¥‡∏ß:', error);
    res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏¢‡∏≠‡∏î‡∏ß‡∏¥‡∏ß' });
  }
});

// 4. ‡∏î‡∏∂‡∏á‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏¢‡∏≠‡∏î‡∏ô‡∏¥‡∏¢‡∏° (Top videos)
app.get('/api/views/top', async (req, res) => {
  try {
    const limit = parseInt(req.query.limit) || 20;
    
    const connection = await pool.getConnection();
    
    try {
      const [rows] = await connection.query(
        'SELECT video_id, views FROM video_views ORDER BY views DESC LIMIT ?',
        [limit]
      );

      res.json(rows);
    } finally {
      connection.release();
    }
  } catch (error) {
    console.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏¢‡∏≠‡∏î‡∏ô‡∏¥‡∏¢‡∏°:', error);
    res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏¢‡∏≠‡∏î‡∏ô‡∏¥‡∏¢‡∏°' });
  }
});

// 5. ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏¢‡∏≠‡∏î‡∏ß‡∏¥‡∏ß (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö admin)
app.post('/api/views/reset/:video_id', async (req, res) => {
  try {
    const { video_id } = req.params;
    
    const connection = await pool.getConnection();
    
    try {
      await connection.query(
        'UPDATE video_views SET views = 0 WHERE video_id = ?',
        [video_id]
      );

      res.json({ success: true, video_id });
    } finally {
      connection.release();
    }
  } catch (error) {
    console.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏¢‡∏≠‡∏î‡∏ß‡∏¥‡∏ß:', error);
    res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏¢‡∏≠‡∏î‡∏ß‡∏¥‡∏ß' });
  }
});

// 6. ‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏£‡∏ß‡∏°
app.get('/api/views/stats', async (req, res) => {
  try {
    const connection = await pool.getConnection();
    
    try {
      const [totalRows] = await connection.query(
        'SELECT COUNT(*) as total_videos, SUM(views) as total_views FROM video_views'
      );

      const [topRows] = await connection.query(
        'SELECT video_id, views FROM video_views ORDER BY views DESC LIMIT 10'
      );

      const [recentRows] = await connection.query(
        'SELECT COUNT(*) as today_views FROM view_logs WHERE DATE(viewed_at) = CURDATE()'
      );

      res.json({
        total_videos: totalRows[0].total_videos,
        total_views: totalRows[0].total_views,
        today_views: recentRows[0].today_views,
        top_videos: topRows
      });
    } finally {
      connection.release();
    }
  } catch (error) {
    console.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥:', error);
    res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥' });
  }
});

// Health check
app.get('/health', (req, res) => {
  res.json({ status: 'ok', timestamp: new Date() });
});

// ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô server
app.listen(PORT, () => {
  console.log(`üöÄ Server ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà http://localhost:${PORT}`);
});

// ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ graceful shutdown
process.on('SIGTERM', async () => {
  console.log('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏¥‡∏î server...');
  await pool.end();
  process.exit(0);
});